#join data -------------------------------------------------------------
all <- join_sleep_awake(sleep, awake_all)
join_sleep_awake <- function(data_sleep, data_awake){
data_sleep %>%
full_join(data_awake, by = c("fecha")) %>%
#just to arrange data
mutate(hora = ifelse(is.na(duerme), despierta, duerme)) %>%
arrange(fecha, hora) %>%
relocate(fecha) %>%
#count nap time
mutate(duracion = difftime(despierta, duerme, units = 'mins')) %>%
#keep only feasible value
dplyr::filter(duracion >0 | is.na(duracion)) %>%
#identify the correct nap time
group_by(duerme) %>%
mutate(correcto = (duracion == min(duracion) | is.na(duracion))) %>%
ungroup() %>%
dplyr::filter(correcto) %>%
select(-hora) %>%
#esto es para el plot, creamos una fecha de manera artificial para poder
#graficar las horas del dia
mutate(hora_plot_duerme = lubridate::ymd_hms(paste("2025-01-01", str_sub(duerme, 11,19))),
hora_plot_despierta = lubridate::ymd_hms(paste("2025-01-01", str_sub(despierta, 11,19)))
) %>%
group_by(fecha) %>%
mutate(
tiempo_entre = as.numeric(difftime(duerme, dplyr::lag(despierta,1), units = 'mins'))
)
}
#join data -------------------------------------------------------------
all <- join_sleep_awake(sleep, awake_all)
shiny::runApp()
runApp()
sleep <- get_horas(raw, new_var = duerme,my_emoji = 'U+270A')
sleep <- get_horas(raw, new_var = duerme,my_emoji = '<U+270A>')
.data %>%
#keep records that have selected emoji
filter(str_detect(text, my_emoji)) %>%
#keep only events that have a time in the message
dplyr::filter(str_detect(text, "[0-9]")) %>%
#   #remove redundancies
dplyr:: filter(!str_detect(text, "âŒš")) %>%
#   #create the new var and transform date into ymd
mutate(
fecha = lubridate::ymd(str_sub(time, 1, 10)),
#get hora from text
hora = lapply( str_extract_all(text, '[0-9]'), function(x){paste(x, collapse = '')}),
hora = case_when(str_length(hora) == 2 ~ glue('{hora}:00:00'),
str_length(hora) == 4 ~ glue('{str_sub(hora,1,2)}:{str_sub(hora,3,4)}:00'),
str_length(hora) == 3 ~ glue('0{str_sub(hora,1,1)}:{str_sub(hora,2,3)}:00'),
T ~ paste(hora, "XXX")
),
{{new_var}} := lubridate::ymd_hms(paste(fecha, hora))
)%>%
#fecha = lubridate::ymd(str_sub(time, 1, 10))) %>%
#keep only variables of interest
select({{new_var}}, fecha, text)  %>%
arrange({{new_var}})
#'@param new_var name given to the new variable created
#'@param my_omoji the emoji that identifies the event:
#'âœŠ: sleeps
#'ğŸ‘€: wakes up
#'@return a table with the time and date when the event occured
get_horas <- function(.data,new_var,my_emoji){
.data %>%
#keep records that have selected emoji
filter(str_detect(text, my_emoji)) %>%
#keep only events that have a time in the message
dplyr::filter(str_detect(text, "[0-9]")) %>%
#   #remove redundancies
dplyr:: filter(!str_detect(text, "âŒš")) %>%
#   #create the new var and transform date into ymd
mutate(
fecha = lubridate::ymd(str_sub(time, 1, 10)),
#get hora from text
hora = lapply( str_extract_all(text, '[0-9]'), function(x){paste(x, collapse = '')}),
hora = case_when(str_length(hora) == 2 ~ glue('{hora}:00:00'),
str_length(hora) == 4 ~ glue('{str_sub(hora,1,2)}:{str_sub(hora,3,4)}:00'),
str_length(hora) == 3 ~ glue('0{str_sub(hora,1,1)}:{str_sub(hora,2,3)}:00'),
T ~ paste(hora, "XXX")
),
{{new_var}} := lubridate::ymd_hms(paste(fecha, hora))
)%>%
#fecha = lubridate::ymd(str_sub(time, 1, 10))) %>%
#keep only variables of interest
select({{new_var}}, fecha, text)  %>%
arrange({{new_var}})
}
sleep <- get_horas(raw, new_var = duerme,my_emoji = "âœŠ")
#'@param new_var name given to the new variable created
#'@param my_omoji the emoji that identifies the event:
#'âœŠ: sleeps
#'ğŸ‘€: wakes up
#'@return a table with the time and date when the event occured
get_horas <- function(.data,new_var,my_emoji){
.data %>%
#keep records that have selected emoji
dplyr::filter(str_detect(text, my_emoji)) %>%
#keep only events that have a time in the message
dplyr::filter(str_detect(text, "[0-9]")) %>%
#   #remove redundancies
dplyr:: filter(!str_detect(text, "âŒš")) %>%
#   #create the new var and transform date into ymd
mutate(
fecha = lubridate::ymd(str_sub(time, 1, 10)),
#get hora from text
hora = lapply( str_extract_all(text, '[0-9]'), function(x){paste(x, collapse = '')}),
hora = case_when(str_length(hora) == 2 ~ glue('{hora}:00:00'),
str_length(hora) == 4 ~ glue('{str_sub(hora,1,2)}:{str_sub(hora,3,4)}:00'),
str_length(hora) == 3 ~ glue('0{str_sub(hora,1,1)}:{str_sub(hora,2,3)}:00'),
T ~ paste(hora, "XXX")
),
{{new_var}} := lubridate::ymd_hms(paste(fecha, hora))
)%>%
#fecha = lubridate::ymd(str_sub(time, 1, 10))) %>%
#keep only variables of interest
select({{new_var}}, fecha, text)  %>%
arrange({{new_var}})
}
sleep <- get_horas(raw, new_var = duerme,my_emoji = "<U+231A>")
sleep <- get_horas(raw, new_var = duerme,my_emoji = "âœŠ")
View(sleep)
head(sleep$text)
View(raw)
raw %>% dplyr::filter(str_detect(emoji_name, "bomb"))
t <- raw %>% dplyr::filter(str_detect(emoji_name, "bomb"))
View(t)
t <- raw %>% dplyr::filter(str_detect(emoji_name, "raised fist"))
View(t)
sleep <- get_horas(raw, new_var = duerme,my_emoji = 'clock')
View(raw)
sleep <- get_horas(raw, new_var = duerme,my_emoji = 'wristwatch')
sleep <- get_horas(raw, new_var = duerme,my_emoji = 'watch')
sleep <- get_horas(raw, new_var = duerme,my_emoji = 'raised fist')
sleep <- get_horas(raw, new_var = duerme,my_emoji = 'raised fist')
t <- raw %>% dplyr::filter(str_detect(emoji_name, "raised fist"))
#'@param new_var name given to the new variable created
#'@param my_omoji the emoji that identifies the event:
#'âœŠ: sleeps
#'ğŸ‘€: wakes up
#'@return a table with the time and date when the event occured
get_horas <- function(.data,new_var,my_emoji){
.data %>%
#keep records that have selected emoji
dplyr::filter(str_detect(emoji_name, my_emoji)) %>%
#keep only events that have a time in the message
dplyr::filter(str_detect(text, "[0-9]")) %>%
#   #remove redundancies
dplyr:: filter(!str_detect(emoji_name, 'watch')) %>%
#   #create the new var and transform date into ymd
mutate(
fecha = lubridate::ymd(str_sub(time, 1, 10)),
#get hora from text
hora = lapply( str_extract_all(text, '[0-9]'), function(x){paste(x, collapse = '')}),
hora = case_when(str_length(hora) == 2 ~ glue('{hora}:00:00'),
str_length(hora) == 4 ~ glue('{str_sub(hora,1,2)}:{str_sub(hora,3,4)}:00'),
str_length(hora) == 3 ~ glue('0{str_sub(hora,1,1)}:{str_sub(hora,2,3)}:00'),
T ~ paste(hora, "XXX")
),
{{new_var}} := lubridate::ymd_hms(paste(fecha, hora))
)%>%
#fecha = lubridate::ymd(str_sub(time, 1, 10))) %>%
#keep only variables of interest
select({{new_var}}, fecha, text)  %>%
arrange({{new_var}})
}
sleep <- get_horas(raw, new_var = duerme,my_emoji = 'raised fist')
#'@param new_var name given to the new variable created
#'@param my_omoji the emoji that identifies the event:
#'âœŠ: sleeps
#'ğŸ‘€: wakes up
#'@return a table with the time and date when the event occured
get_horas <- function(.data,new_var,my_emoji){
.data %>%
#keep records that have selected emoji
dplyr::filter(str_detect(text, my_emoji)) %>%
#keep only events that have a time in the message
dplyr::filter(str_detect(text, "[0-9]")) %>%
#   #remove redundancies
dplyr:: filter(!str_detect(text, "âŒš")) %>%
#   #create the new var and transform date into ymd
mutate(
fecha = lubridate::ymd(str_sub(time, 1, 10)),
#get hora from text
hora = lapply( str_extract_all(text, '[0-9]'), function(x){paste(x, collapse = '')}),
hora = case_when(str_length(hora) == 2 ~ glue('{hora}:00:00'),
str_length(hora) == 4 ~ glue('{str_sub(hora,1,2)}:{str_sub(hora,3,4)}:00'),
str_length(hora) == 3 ~ glue('0{str_sub(hora,1,1)}:{str_sub(hora,2,3)}:00'),
T ~ paste(hora, "XXX")
),
{{new_var}} := lubridate::ymd_hms(paste(fecha, hora))
)%>%
#fecha = lubridate::ymd(str_sub(time, 1, 10))) %>%
#keep only variables of interest
select({{new_var}}, fecha, text)  %>%
arrange({{new_var}})
}
sleep2 <- get_horas(raw, new_var = duerme,my_emoji = "âœŠ")
#'@param new_var name given to the new variable created
#'@param my_omoji the emoji that identifies the event:
#'âœŠ: sleeps
#'ğŸ‘€: wakes up
#'@return a table with the time and date when the event occured
get_horas <- function(.data,new_var,my_emoji){
.data %>%
#keep records that have selected emoji
dplyr::filter(str_detect(emoji_name, my_emoji)) %>%
#keep only events that have a time in the message
dplyr::filter(str_detect(text, "[0-9]")) %>%
#   #remove redundancies
dplyr:: filter(!str_detect(emoji_name, "watch")) %>%
#   #create the new var and transform date into ymd
mutate(
fecha = lubridate::ymd(str_sub(time, 1, 10)),
#get hora from text
hora = lapply( str_extract_all(text, '[0-9]'), function(x){paste(x, collapse = '')}),
hora = case_when(str_length(hora) == 2 ~ glue('{hora}:00:00'),
str_length(hora) == 4 ~ glue('{str_sub(hora,1,2)}:{str_sub(hora,3,4)}:00'),
str_length(hora) == 3 ~ glue('0{str_sub(hora,1,1)}:{str_sub(hora,2,3)}:00'),
T ~ paste(hora, "XXX")
),
{{new_var}} := lubridate::ymd_hms(paste(fecha, hora))
)%>%
#fecha = lubridate::ymd(str_sub(time, 1, 10))) %>%
#keep only variables of interest
select({{new_var}}, fecha, text)  %>%
arrange({{new_var}})
}
sleep <- get_horas(raw, new_var = duerme,my_emoji = 'raised fist')
#awake data -----------------------------------------------------------
awake <- get_horas(raw,new_var = despierta, "eyes")
#add missing dates, sometimes we forget to record this
awake_all <- add_missing_dates(awake, c("2023-06-02 12:20:00",
"2023-06-10 15:30:00"),
col_date = despierta)
#join data -------------------------------------------------------------
all <- join_sleep_awake(sleep, awake_all)
runApp()
rio::export(all, 'data/sleep.rds')
Sys.Date()
Sys.time()
rio::export(last_refreshed, 'data/last_refreshed.rds')
last_refreshed <- Sys.time()
rio::export(last_refreshed, 'data/last_refreshed.rds')
data_plot <- all %>%
select(fecha, duerme, despierta) %>%
pivot_longer(-c(fecha),
names_to = "indicador",
values_to = 'hora') %>%
filter(!is.na(hora)) %>%
mutate(hora_plot = lubridate::ymd_hms(paste("2025-01-01", str_sub(hora, 11,19))))
data_plot <- all %>%
select(fecha, duerme, despierta) %>%
pivot_longer(-c(fecha),
names_to = "indicador",
values_to = 'hora') %>%
dplyr::filter(!is.na(hora)) %>%
mutate(hora_plot = lubridate::ymd_hms(paste("2025-01-01", str_sub(hora, 11,19))))
ggplot(data_plot,
aes(y = fecha,
x = hora_plot,
color = indicador
))+
geom_segment(data= all %>% mutate(indicador = "despierta"),
aes(x = hora_plot_duerme,
xend = hora_plot_despierta,
y = fecha,
yend = fecha),
show.legend = F
) +
#points
geom_point(size = 3) +
lapply(c('09','12','15'), function(x){
time <- glue::glue('2025-01-01 {x}:00:00')
geom_vline(xintercept = lubridate::ymd_hms(time),
linetype = 'dotted')
}) +
scale_color_manual(breaks = c("duerme", "despierta"),
values = c('#D34D71', '#4000A0'),
name ="") +
scale_y_date(breaks = '1 days',
labels = function(x)format(x, "%d %b")) +
scale_x_datetime(breaks = '1 hours',
labels = function(x)format(x, "%H:%M")) +
labs(x = '',
y = '',
title = "Seguimiento de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_emilia()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
output$plot <- renderPlot({
ggplot(data_plot(),
aes(y = fecha,
x = hora_plot,
color = indicador
)) +
geom_segment(data= data_app() %>% mutate(indicador = "despierta"),
aes(x = hora_plot_duerme,
xend = hora_plot_despierta,
y = fecha,
yend = fecha),
show.legend = F
) +
#points
geom_point(size = 3) +
lapply(c('09','12','15'), function(x){
time <- glue::glue('2025-01-01 {x}:00:00')
geom_vline(xintercept = lubridate::ymd_hms(time),
linetype = 'dotted')
}) +
scale_color_manual(breaks = c("duerme", "despierta"),
values = c('#D34D71', '#4000A0'),
name ="") +
scale_y_date(breaks = '1 days',
labels = function(x)format(x, "%d %b")) +
scale_x_datetime(breaks = '1 hours',
labels = function(x)format(x, "%H:%M")) +
labs(x = '',
y = '',
title = "Seguimiento de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_emilia()
})
runApp()
runApp()
plot_track_naps <- function(.data, data_all){
.data %>%
ggplot(aes(y = fecha,
x = hora_plot,
color = indicador
)) +
geom_segment(data= data_all %>% mutate(indicador = "despierta"),
aes(x = hora_plot_duerme,
xend = hora_plot_despierta,
y = fecha,
yend = fecha),
show.legend = F
) +
#points
geom_point(size = 3) +
lapply(c('09','12','15'), function(x){
time <- glue::glue('2025-01-01 {x}:00:00')
geom_vline(xintercept = lubridate::ymd_hms(time),
linetype = 'dotted')
}) +
scale_color_manual(breaks = c("duerme", "despierta"),
values = c('#D34D71', '#4000A0'),
name ="") +
scale_y_date(breaks = '1 days',
labels = function(x)format(x, "%d %b")) +
scale_x_datetime(breaks = '1 hours',
labels = function(x)format(x, "%H:%M")) +
labs(x = '',
y = '',
title = "Seguimiento de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_emilia()
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
gmdacr::load_functions('functions')
gmdacr::load_functions('functions')
#'@param new_var name given to the new variable created
#'@param my_omoji the emoji that identifies the event:
#'âœŠ: sleeps
#'ğŸ‘€: wakes up
#'@return a table with the time and date when the event occured
get_horas <- function(.data,new_var,my_emoji){
.data %>%
#keep records that have selected emoji
dplyr::filter(str_detect(emoji_name, my_emoji)) %>%
#keep only events that have a time in the message
dplyr::filter(str_detect(text, "[0-9]")) %>%
#   #remove redundancies
dplyr:: filter(!str_detect(emoji_name, "watch")) %>%
#   #create the new var and transform date into ymd
mutate(
fecha = lubridate::ymd(str_sub(time, 1, 10)),
#get hora from text
hora = lapply( str_extract_all(text, '[0-9]'), function(x){paste(x, collapse = '')}),
hora = case_when(str_length(hora) == 2 ~ glue('{hora}:00:00'),
str_length(hora) == 4 ~ glue('{str_sub(hora,1,2)}:{str_sub(hora,3,4)}:00'),
str_length(hora) == 3 ~ glue('0{str_sub(hora,1,1)}:{str_sub(hora,2,3)}:00'),
T ~ paste(hora, "XXX")
),
{{new_var}} := lubridate::ymd_hms(paste(fecha, hora))
)%>%
#fecha = lubridate::ymd(str_sub(time, 1, 10))) %>%
#keep only variables of interest
select({{new_var}}, fecha, text)  %>%
arrange({{new_var}})
}
gmdacr::load_functions('functions')
gmdacr::load_functions('functions')
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
sleep <- readRDS("C:/repositaries/4.personal/Emilia/sleep.rds")
View(sleep)
runApp()
runApp()
options(
# whenever there is one account token found, use the cached token
gargle_oauth_email = 'araupontones@gmail.com',
# specify auth tokens should be stored in a hidden directory ".secrets"
gargle_oauth_cache = ".secrets"
)
googledrive::drive_auth()
shiny::runApp()
runApp()
?drive_auth
#authenticate ------------------------------------------------------------------
token <- drive_auth(email = 'araupontones@gmail.com')
token <- drive_auth()
token
list.files()
?list.files
list.files(all.files = T)
list.files(all.files = T, recursive = T)
token <- import('.secrets/a754e77d3ef29c76c4e8df0bce200e88_araupontones@gmail.com')
#authenticate ------------------------------------------------------------------
drive_auth(email = 'araupontones@gmail.com',
service_token = '.secrets/a754e77d3ef29c76c4e8df0bce200e88_araupontones@gmail.com'
)
?drive_auth
#authenticate ------------------------------------------------------------------
drive_auth(email = 'araupontones@gmail.com',
token = '.secrets/a754e77d3ef29c76c4e8df0bce200e88_araupontones@gmail.com'
)
#authenticate ------------------------------------------------------------------
drive_auth(email = 'araupontones@gmail.com',
token = '.secrets/a754e77d3ef29c76c4e8df0bce200e88_araupontones@gmail.com'
)
#define tempfile
my_txt <- tempfile(fileext = '.txt')
#get list of files with this pattern
f <- drive_get("Emilia/WhatsApp Chat with Marti EspaÃ±a.txt")
?drive_get
#authenticate ------------------------------------------------------------------
t <- drive_auth(email = 'araupontones@gmail.com',
token = '.secrets/a754e77d3ef29c76c4e8df0bce200e88_araupontones@gmail.com'
)
#authenticate ------------------------------------------------------------------
drive_auth(email = 'araupontones@gmail.com',
path ='.secrets/a754e77d3ef29c76c4e8df0bce200e88_araupontones@gmail.com'
)
#authenticate ------------------------------------------------------------------
drive_auth(#email = 'araupontones@gmail.com',
path ='.secrets/a754e77d3ef29c76c4e8df0bce200e88_araupontones@gmail.com'
)
#authenticate ------------------------------------------------------------------
t <- drive_auth(#email = 'araupontones@gmail.com',
path ='aa.rds'
)
#authenticate ------------------------------------------------------------------
drive_auth(email = 'araupontones@gmail.com',
token = '.secrets/a754e77d3ef29c76c4e8df0bce200e88_araupontones@gmail.com'
)
#authenticate ------------------------------------------------------------------
drive_auth(#email = 'araupontones@gmail.com',
token = '.secrets/a754e77d3ef29c76c4e8df0bce200e88_araupontones@gmail.com'
)
#authenticate ------------------------------------------------------------------
drive_auth(email = 'araupontones@gmail.com',
token = '.secrets/a754e77d3ef29c76c4e8df0bce200e88_araupontones@gmail.com'
)
file.copy(from = '.secrets/a754e77d3ef29c76c4e8df0bce200e88_araupontones@gmail.com',
to = 'a754e77d3ef29c76c4e8df0bce200e88_araupontones@gmail.com')
#authenticate ------------------------------------------------------------------
drive_auth(email = 'araupontones@gmail.com',
token = 'a754e77d3ef29c76c4e8df0bce200e88_araupontones@gmail.com'
)
gargle::gargle_oauth_cache()
list.files(".secrets/")
shiny::runApp()
my_oauth_token <- # some process that results in the token you want to use
drive_auth(token = my_oauth_token)
token_fetch()
googledrive::drive_token()
scopes <- "https://www.googleapis.com/auth/drive"
credentials_user_oauth2(scopes, client = gargle_client())
gargle::credentials_user_oauth2(scopes, client = gargle_client())
token <- gargle::credentials_user_oauth2(scopes, client = gargle_client())
token
saveRDS(token, 'blah.rds')
drive_auth(token = readRDS("blah.rds"))
# scopes <- "https://www.googleapis.com/auth/drive"
# token <- gargle::credentials_user_oauth2(scopes, client = gargle_client())
drive_auth(token = readRDS("blah.rds"))
