plot.title = element_text(size = 23, margin = margin(b = 15)),
panel.background = element_rect(fill = 'white', color = NA),
plot.background = element_rect(fill = 'white'))
mean(data_duracion$duracion_total, na.rm = T)
promedio <- mean(data_duracion$duracion_total, na.rm = T)
ggplot(data_duracion,
aes(x = fecha,
y = duracion_total)
) +
geom_col(width = .8,
fill= '#B870CB') + #labels & theme --------------------------------------------------------------
#hlines ---------------------------------------------------------------------
lapply(promedio), function(x){
geom_hline(yintercept = x,
linetype = 'dotted')
}) +
labs(y = 'DuraciÃ³n (minutos)',
x = '',
title = "DuraciÃ³n TOTAL de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_minimal() +
theme(legend.position = 'top',
text = element_text(family = "Comfortaa"),
axis.text.x = element_text(angle = 90),
plot.title.position = 'plot',
plot.title = element_text(size = 23, margin = margin(b = 15)),
panel.background = element_rect(fill = 'white', color = NA),
plot.background = element_rect(fill = 'white'))
ggplot(data_duracion,
aes(x = fecha,
y = duracion_total)
) +
geom_col(width = .8,
fill= '#B870CB') + #labels & theme --------------------------------------------------------------
#hlines ---------------------------------------------------------------------
lapply(promedio, function(x){
geom_hline(yintercept = x,
linetype = 'dotted')
}) +
labs(y = 'DuraciÃ³n (minutos)',
x = '',
title = "DuraciÃ³n TOTAL de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_minimal() +
theme(legend.position = 'top',
text = element_text(family = "Comfortaa"),
axis.text.x = element_text(angle = 90),
plot.title.position = 'plot',
plot.title = element_text(size = 23, margin = margin(b = 15)),
panel.background = element_rect(fill = 'white', color = NA),
plot.background = element_rect(fill = 'white'))
geom_hline(yintercept = x,
linetype = 'dotted',
size= 2)
ggplot(data_duracion,
aes(x = fecha,
y = duracion_total)
) +
geom_col(width = .8,
fill= '#B870CB') + #labels & theme --------------------------------------------------------------
#hlines ---------------------------------------------------------------------
lapply(promedio, function(x){
geom_hline(yintercept = x,
linetype = 'dotted',
size= 2)
}) +
labs(y = 'DuraciÃ³n (minutos)',
x = '',
title = "DuraciÃ³n TOTAL de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_minimal() +
theme(legend.position = 'top',
text = element_text(family = "Comfortaa"),
axis.text.x = element_text(angle = 90),
plot.title.position = 'plot',
plot.title = element_text(size = 23, margin = margin(b = 15)),
panel.background = element_rect(fill = 'white', color = NA),
plot.background = element_rect(fill = 'white'))
geom_hline(yintercept = x,
linetype = 'dotted',
size= 1)
ggplot(data_duracion,
aes(x = fecha,
y = duracion_total)
) +
geom_col(width = .8,
fill= '#B870CB') + #labels & theme --------------------------------------------------------------
#hlines ---------------------------------------------------------------------
lapply(promedio, function(x){
geom_hline(yintercept = x,
linetype = 'dotted',
size= 1)
}) +
labs(y = 'DuraciÃ³n (minutos)',
x = '',
title = "DuraciÃ³n TOTAL de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_minimal() +
theme(legend.position = 'top',
text = element_text(family = "Comfortaa"),
axis.text.x = element_text(angle = 90),
plot.title.position = 'plot',
plot.title = element_text(size = 23, margin = margin(b = 15)),
panel.background = element_rect(fill = 'white', color = NA),
plot.background = element_rect(fill = 'white'))
ggplot(data_duracion,
aes(x = fecha,
y = duracion_total)
) +
geom_col(width = .8,
fill= '#B870CB') + #labels & theme --------------------------------------------------------------
#hlines ---------------------------------------------------------------------
lapply(promedio, function(x){
geom_hline(yintercept = x,
linetype = 'dotted',
size= 1)
}) +
scale_x_date(breaks = '1 day',
labels = function(x)format(x,"%d %b")) +
labs(y = 'DuraciÃ³n (minutos)',
x = '',
title = "DuraciÃ³n TOTAL de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_minimal() +
theme(legend.position = 'top',
text = element_text(family = "Comfortaa"),
axis.text.x = element_text(angle = 90),
plot.title.position = 'plot',
plot.title = element_text(size = 23, margin = margin(b = 15)),
panel.background = element_rect(fill = 'white', color = NA),
plot.background = element_rect(fill = 'white'))
library(rio)
library(rwhatsapp)
library(stringr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(extrafont)
#font_import(paths = "C:/Users/andre/AppData/Local/Microsoft/Windows/Fonts")
#loadfonts(device = "win")
#get raw data ---------------------------------------------------------------------
raw <- rwa_read(file.path('data', list.files('data')))
# to get the name of the person who sent the message ---------------------------
#I am doing this because some times the two send a message at the exact same time
names <-raw %>%
filter(str_detect(text, "âœŠ"))
#Get the horas when sleeping and waking up =====================================
#'@param new_var name given to the new variable created
#'@param my_omoji the emoji that identifies the event:
#'âœŠ: sleeps
#'ðŸ‘€: wakes up
#'@return a table with the time and date when the event occured
get_horas <- function(.data,new_var,my_emoji){
.data %>%
filter(str_detect(text, my_emoji))%>%
#keep only events that have a time in the message
filter(str_detect(text, "[0-9]")) %>%
#remove redundancies
filter(!str_detect(text, "âŒš")) %>%
#create the new var and transform date into ymd
mutate({{new_var}} := time,
fecha = lubridate::ymd(str_sub(time, 1, 10))
)%>%
#fecha = lubridate::ymd(str_sub(time, 1, 10))) %>%
#keep only variables of interest
select({{new_var}}, fecha)
}
#mutate(fecha = lubridate::ymd(fecha))
#get sleep and awake times ----------------------------------------------------
sleep <- get_horas(raw,new_var = duerme,"âœŠ")
awake <- get_horas(raw,new_var = despierta, "ðŸ‘€")
#Join sleep and awake ==========================================================
all <- sleep %>%
full_join(awake, by = c("fecha")) %>%
#just to arrange data
mutate(hora = ifelse(is.na(duerme), despierta, duerme)) %>%
arrange(fecha, hora) %>%
relocate(fecha) %>%
#count nap time
mutate(duracion = difftime(despierta, duerme, units = 'mins')) %>%
#keep only feasible value
filter(duracion >0 | is.na(duracion)) %>%
#identify the correct nap time
group_by(duerme) %>%
mutate(correcto = (duracion == min(duracion) | is.na(duracion))) %>%
ungroup() %>%
filter(correcto) %>%
select(-hora) %>%
#get the author of the nao
left_join(select(names, time, author),
by = c('duerme' = 'time')) %>%
#estp es para el plot
mutate(hora_plot_duerme = lubridate::ymd_hms(paste("2025-01-01", str_sub(duerme, 11,19))),
hora_plot_despierta = lubridate::ymd_hms(paste("2025-01-01", str_sub(despierta, 11,19))))
data_plot <- all %>%
select(fecha, duerme, despierta) %>%
pivot_longer(-c(fecha),
names_to = "indicador",
values_to = 'hora') %>%
filter(!is.na(hora)) %>%
mutate(hora_plot = lubridate::ymd_hms(paste("2025-01-01", str_sub(hora, 11,19))))
#Seguimiento de siestas ========================================================
ggplot(data_plot,
aes(y = fecha,
x = hora_plot,
color = indicador
))+
geom_segment(data= all %>% mutate(indicador = "despierta"),
aes(x = hora_plot_duerme,
xend = hora_plot_despierta,
y = fecha,
yend = fecha),
show.legend = F
) +
#points
geom_point(size = 3) +
lapply(c('09','12','15'), function(x){
time <- glue::glue('2025-01-01 {x}:00:00')
geom_vline(xintercept = lubridate::ymd_hms(time),
linetype = 'dotted')
}) +
scale_color_manual(breaks = c("duerme", "despierta"),
values = c('#D34D71', '#4000A0'),
name ="") +
scale_y_date(breaks = '1 days',
labels = function(x)format(x, "%d %b")) +
scale_x_datetime(breaks = '1 hours',
labels = function(x)format(x, "%H:%M")) +
labs(x = '',
y = '',
title = "Seguimiento de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_minimal() +
theme(legend.position = 'bottom',
text = element_text(family = "Comfortaa"),
plot.title.position = 'plot',
plot.title = element_text(size = 24, margin = margin(b = 15)),
panel.background = element_rect(fill = 'white', color = NA),
plot.background = element_rect(fill = 'white'))
ggsave('plots/track_naps.png')
#Duracion de las siestas =======================================================
data_duracion <- all %>%
mutate(duracion = as.numeric(duracion)) %>%
group_by(fecha) %>%
summarise(duracion_media = mean(duracion, na.rm = T),
duracion_total = sum(duracion, na.rm = T),
duracion_min = min(duracion, na.rm = T),
duracion_max = max(duracion, na.rm = T),
.groups = 'drop') %>%
mutate(across(c(duracion_min, duracion_max),function(x)ifelse(x %in% c(Inf, -Inf), NA_real_, x)))
ggplot(data_duracion,
aes(x = fecha,
y = duracion_media)
) +
#Columns ---------------------------------------------------------------------
geom_col(width = .8,
fill= '#B870CB') +
#points ----------------------------------------------------------------------
geom_point(aes(y = duracion_min,
color = 'Min'),
size = 2) +
geom_point(aes(y = duracion_max,
color = "Max"),
size = 2) +
scale_color_manual(
breaks = c("Min", "Max"),
values = c( '#07A6ED', '#F14D40'),
name = ""
) +
#hlines ---------------------------------------------------------------------
lapply(c(40, 80, 120), function(x){
geom_hline(yintercept = x,
linetype = 'dotted')
}) +
#scale axis -------------------------------------------------------------------
scale_x_date(breaks = '1 day',
labels = function(x)format(x,"%d %b")) +
scale_y_continuous(breaks = seq(0,150,10)) +
#labels & theme --------------------------------------------------------------
labs(y = 'DuraciÃ³n (minutos)',
x = '',
title = "DuraciÃ³n promedio de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_minimal() +
theme(legend.position = 'top',
text = element_text(family = "Comfortaa"),
axis.text.x = element_text(angle = 90),
plot.title.position = 'plot',
plot.title = element_text(size = 23, margin = margin(b = 15)),
panel.background = element_rect(fill = 'white', color = NA),
plot.background = element_rect(fill = 'white'))
ggsave('plots/average_nap_time.png')
#Numero de siestas ============================================================
promedio <- mean(data_duracion$duracion_total, na.rm = T)
ggplot(data_duracion,
aes(x = fecha,
y = duracion_total)
) +
geom_col(width = .8,
fill= '#B870CB') + #labels & theme --------------------------------------------------------------
#hlines ---------------------------------------------------------------------
lapply(promedio, function(x){
geom_hline(yintercept = x,
linetype = 'dotted',
size= 1)
}) +
scale_x_date(breaks = '1 day',
labels = function(x)format(x,"%d %b")) +
labs(y = 'DuraciÃ³n (minutos)',
x = '',
title = "DuraciÃ³n TOTAL de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_minimal() +
theme(legend.position = 'top',
text = element_text(family = "Comfortaa"),
axis.text.x = element_text(angle = 90),
plot.title.position = 'plot',
plot.title = element_text(size = 23, margin = margin(b = 15)),
panel.background = element_rect(fill = 'white', color = NA),
plot.background = element_rect(fill = 'white'))
ggsave('plots/total_nap_time.png')
library(rio)
library(rwhatsapp)
library(stringr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(extrafont)
#font_import(paths = "C:/Users/andre/AppData/Local/Microsoft/Windows/Fonts")
#loadfonts(device = "win")
#get raw data ---------------------------------------------------------------------
raw <- rwa_read(file.path('data', list.files('data')))
# to get the name of the person who sent the message ---------------------------
#I am doing this because some times the two send a message at the exact same time
names <-raw %>%
filter(str_detect(text, "âœŠ"))
#Get the horas when sleeping and waking up =====================================
#'@param new_var name given to the new variable created
#'@param my_omoji the emoji that identifies the event:
#'âœŠ: sleeps
#'ðŸ‘€: wakes up
#'@return a table with the time and date when the event occured
get_horas <- function(.data,new_var,my_emoji){
.data %>%
filter(str_detect(text, my_emoji))%>%
#keep only events that have a time in the message
filter(str_detect(text, "[0-9]")) %>%
#remove redundancies
filter(!str_detect(text, "âŒš")) %>%
#create the new var and transform date into ymd
mutate({{new_var}} := time,
fecha = lubridate::ymd(str_sub(time, 1, 10))
)%>%
#fecha = lubridate::ymd(str_sub(time, 1, 10))) %>%
#keep only variables of interest
select({{new_var}}, fecha)
}
#mutate(fecha = lubridate::ymd(fecha))
#get sleep and awake times ----------------------------------------------------
sleep <- get_horas(raw,new_var = duerme,"âœŠ")
awake <- get_horas(raw,new_var = despierta, "ðŸ‘€")
#Join sleep and awake ==========================================================
all <- sleep %>%
full_join(awake, by = c("fecha")) %>%
#just to arrange data
mutate(hora = ifelse(is.na(duerme), despierta, duerme)) %>%
arrange(fecha, hora) %>%
relocate(fecha) %>%
#count nap time
mutate(duracion = difftime(despierta, duerme, units = 'mins')) %>%
#keep only feasible value
filter(duracion >0 | is.na(duracion)) %>%
#identify the correct nap time
group_by(duerme) %>%
mutate(correcto = (duracion == min(duracion) | is.na(duracion))) %>%
ungroup() %>%
filter(correcto) %>%
select(-hora) %>%
#get the author of the nao
left_join(select(names, time, author),
by = c('duerme' = 'time')) %>%
#estp es para el plot
mutate(hora_plot_duerme = lubridate::ymd_hms(paste("2025-01-01", str_sub(duerme, 11,19))),
hora_plot_despierta = lubridate::ymd_hms(paste("2025-01-01", str_sub(despierta, 11,19))))
data_plot <- all %>%
select(fecha, duerme, despierta) %>%
pivot_longer(-c(fecha),
names_to = "indicador",
values_to = 'hora') %>%
filter(!is.na(hora)) %>%
mutate(hora_plot = lubridate::ymd_hms(paste("2025-01-01", str_sub(hora, 11,19))))
#Seguimiento de siestas ========================================================
ggplot(data_plot,
aes(y = fecha,
x = hora_plot,
color = indicador
))+
geom_segment(data= all %>% mutate(indicador = "despierta"),
aes(x = hora_plot_duerme,
xend = hora_plot_despierta,
y = fecha,
yend = fecha),
show.legend = F
) +
#points
geom_point(size = 3) +
lapply(c('09','12','15'), function(x){
time <- glue::glue('2025-01-01 {x}:00:00')
geom_vline(xintercept = lubridate::ymd_hms(time),
linetype = 'dotted')
}) +
scale_color_manual(breaks = c("duerme", "despierta"),
values = c('#D34D71', '#4000A0'),
name ="") +
scale_y_date(breaks = '1 days',
labels = function(x)format(x, "%d %b")) +
scale_x_datetime(breaks = '1 hours',
labels = function(x)format(x, "%H:%M")) +
labs(x = '',
y = '',
title = "Seguimiento de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_minimal() +
theme(legend.position = 'bottom',
text = element_text(family = "Comfortaa"),
plot.title.position = 'plot',
plot.title = element_text(size = 24, margin = margin(b = 15)),
panel.background = element_rect(fill = 'white', color = NA),
plot.background = element_rect(fill = 'white'))
ggsave('plots/track_naps.png')
#Duracion de las siestas =======================================================
data_duracion <- all %>%
mutate(duracion = as.numeric(duracion)) %>%
group_by(fecha) %>%
summarise(duracion_media = mean(duracion, na.rm = T),
duracion_total = sum(duracion, na.rm = T),
duracion_min = min(duracion, na.rm = T),
duracion_max = max(duracion, na.rm = T),
.groups = 'drop') %>%
mutate(across(c(duracion_min, duracion_max),function(x)ifelse(x %in% c(Inf, -Inf), NA_real_, x)))
ggplot(data_duracion,
aes(x = fecha,
y = duracion_media)
) +
#Columns ---------------------------------------------------------------------
geom_col(width = .8,
fill= '#B870CB') +
#points ----------------------------------------------------------------------
geom_point(aes(y = duracion_min,
color = 'Min'),
size = 2) +
geom_point(aes(y = duracion_max,
color = "Max"),
size = 2) +
scale_color_manual(
breaks = c("Min", "Max"),
values = c( '#07A6ED', '#F14D40'),
name = ""
) +
#hlines ---------------------------------------------------------------------
lapply(c(40, 80, 120), function(x){
geom_hline(yintercept = x,
linetype = 'dotted')
}) +
#scale axis -------------------------------------------------------------------
scale_x_date(breaks = '1 day',
labels = function(x)format(x,"%d %b")) +
scale_y_continuous(breaks = seq(0,150,10)) +
#labels & theme --------------------------------------------------------------
labs(y = 'DuraciÃ³n (minutos)',
x = '',
title = "DuraciÃ³n promedio de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_minimal() +
theme(legend.position = 'top',
text = element_text(family = "Comfortaa"),
axis.text.x = element_text(angle = 90),
plot.title.position = 'plot',
plot.title = element_text(size = 23, margin = margin(b = 15)),
panel.background = element_rect(fill = 'white', color = NA),
plot.background = element_rect(fill = 'white'))
ggsave('plots/average_nap_time.png')
#Numero de siestas ============================================================
promedio <- mean(data_duracion$duracion_total, na.rm = T)
ggplot(data_duracion,
aes(x = fecha,
y = duracion_total)
) +
geom_col(width = .8,
fill= '#B870CB') + #labels & theme --------------------------------------------------------------
#hlines ---------------------------------------------------------------------
lapply(promedio, function(x){
geom_hline(yintercept = x,
linetype = 'dotted',
size= 1)
}) +
scale_x_date(breaks = '1 day',
labels = function(x)format(x,"%d %b")) +
labs(y = 'DuraciÃ³n (minutos)',
x = '',
title = "DuraciÃ³n TOTAL de siestas de Emilia",
caption = "Data: Mensajes de WhatsApp con Martina") +
theme_minimal() +
theme(legend.position = 'top',
text = element_text(family = "Comfortaa"),
axis.text.x = element_text(angle = 90),
plot.title.position = 'plot',
plot.title = element_text(size = 23, margin = margin(b = 15)),
panel.background = element_rect(fill = 'white', color = NA),
plot.background = element_rect(fill = 'white'))
ggsave('plots/total_nap_time.png')
View(all)
